// Code generated by MockGen. DO NOT EDIT.
// Source: node.go

// Package mock_node is a generated GoMock package.
package mock_node

import (
	gomock "github.com/golang/mock/gomock"
	peer "github.com/libp2p/go-libp2p-core/peer"
	reflect "reflect"
)

// MockmessageHandler is a mock of messageHandler interface
type MockmessageHandler struct {
	ctrl     *gomock.Controller
	recorder *MockmessageHandlerMockRecorder
}

// MockmessageHandlerMockRecorder is the mock recorder for MockmessageHandler
type MockmessageHandlerMockRecorder struct {
	mock *MockmessageHandler
}

// NewMockmessageHandler creates a new mock instance
func NewMockmessageHandler(ctrl *gomock.Controller) *MockmessageHandler {
	mock := &MockmessageHandler{ctrl: ctrl}
	mock.recorder = &MockmessageHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockmessageHandler) EXPECT() *MockmessageHandlerMockRecorder {
	return m.recorder
}

// HandleMessage mocks base method
func (m *MockmessageHandler) HandleMessage(content []byte, id peer.ID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleMessage", content, id)
}

// HandleMessage indicates an expected call of HandleMessage
func (mr *MockmessageHandlerMockRecorder) HandleMessage(content, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleMessage", reflect.TypeOf((*MockmessageHandler)(nil).HandleMessage), content, id)
}
